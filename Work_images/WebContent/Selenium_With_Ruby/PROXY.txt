Selenium RC Architecture:

To understand in detail how Selenium RC Server works and why it uses 

1. Proxy injection and 
2. Heightened privilege modes 

you must first understand the same origin policy.

The Same Origin Policy:

The same-origin policy is an important security concept for a number of
browser-side programming languages, such as JavaScript.

The main restriction that Selenium faces is the Same Origin Policy. 
This security restriction is applied by every browser in the market and its 
objective is to ensure that a site’s content will never be accessible by a 
script from another site. The Same Origin Policy dictates that any code
loaded within the browser can only operate within that website’s domain. 
It cannot perform functions on another website. 

So for example: 

if the browser loads JavaScript code when it loads www.mysite.com, it cannot run
that loaded code against www.mysite2.com–even if that’s another of your sites. 
If this were possible, a script placed on any website you open would be able to
read information on your bank account if you had the account page opened on 
other tab. This is called XSS (Cross-site Scripting).

Cross-Site Scripting (XSS) attacks occur when:

Data enters a Web application through an untrusted source, most frequently a 
web request.
The data is included in dynamic content that is sent to a web user without 
being validated for malicious script. 

Proxy injection:

the Selenium Server acts as a
1. client-configured 
2. HTTP proxy

that sits between the browser(Firefox, Chrome) and the Application Under Test.
It then masks the AUT under a fictional URL (embedding Selenium-Core and the set
of tests and delivering them as if they were coming from the same origin).

1. The proxy is a third person in the middle that passes the ball between 
the two parts. It acts as a “web server” that delivers the AUT to the browser.
Being a proxy gives Selenium Server the capability of “lying” about the AUT’s
real URL.
2. The browser is launched with a configuration profile that has set 
localhost:4444 as the HTTP proxy, this is why any HTTP request that the browser
does will pass through Selenium server and the response will pass through it
and not from the real server.

As a test suite starts in your favorite language, the following happens:

    The client/driver establishes a connection with the selenium-RC server.
    Selenium RC server launches a browser (or reuses an old one) with a URL 
that injects Selenium-Core’s JavaScript into the browser-loaded web page.
    The client-driver passes a Selenese command to the server.
3.The Server interprets the command and then triggers the corresponding 
JavaScript execution to execute that command within the browser. Selenium-Core 
instructs the browser to act on that first instruction, typically opening a 
page of the AUT.
4.The browser receives the open request and asks for the website’s content from
the Selenium RC server (set as the HTTP proxy for the browser to use).
4.Selenium RC server communicates with the Web server asking for the page and 
once it receives it, it sends the page to the browser masking the origin to 
look like the page comes from the same server as Selenium-Core (this allows 
Selenium-Core to comply with the Same Origin Policy).
    
5.The browser receives the web page and renders it in the frame/window reserved for it.

Heightened Privileges Browsers:

This workflow in this method is very similar to Proxy Injection but the main
 difference is that the browsers are launched in a special mode called 
Heightened Privileges, which allows websites to do things that are not commonly
 permitted (as doing XSS, or filling file upload inputs and pretty useful stuff
 for Selenium). By using these browser modes, Selenium Core is able to directly
 open the AUT and read/interact with its content without having to pass the 
whole AUT through the Selenium RC server.


As a test suite starts in your favorite language, the following happens:

1.The client/driver establishes a connection with the selenium-RC server.

2.Selenium RC server launches a browser (or reuses an old one) with a URL that 
will load Selenium-Core in the web page.
3.Selenium-Core gets the first instruction from the client/driver (via another 
HTTP request made to the Selenium RC Server).
4.Selenium-Core acts on that first instruction, typically opening a page of 
the AUT.
5.The browser receives the open request and asks the Web Server for the page. 
Once the browser receives the web page, renders it in the frame/window reserved
for it.




















